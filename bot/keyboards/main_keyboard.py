"""Advanced keyboard layouts for the bot."""

from typing import List, Optional

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup

from ..core.dependencies import get_container


def get_main_keyboard(exclude: Optional[str] = None, is_admin: bool = False) -> InlineKeyboardMarkup:
    """Get main navigation keyboard."""
    buttons = []

    # Main features
    if exclude != "about_me":
        buttons.append([InlineKeyboardButton(
            text="üë§ –û–±–æ –º–Ω–µ", callback_data="about_me")])

    if exclude != "portfolio":
        buttons.append([InlineKeyboardButton(
            text="üíº –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data="portfolio")])

    # New features row
    feature_row = []
    if exclude != "quotes":
        feature_row.append(InlineKeyboardButton(
            text="üí¨ –¶–∏—Ç–∞—Ç—ã", callback_data="quotes"))
    
    if exclude != "weather":
        feature_row.append(InlineKeyboardButton(
            text="üå§ –ü–æ–≥–æ–¥–∞", callback_data="weather"))
    
    if feature_row:
        buttons.append(feature_row)

    # Tools row
    tools_row = []
    if exclude != "news":
        tools_row.append(InlineKeyboardButton(
            text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="news"))
    
    if exclude != "crypto":
        tools_row.append(InlineKeyboardButton(
            text="‚Çø –ö—Ä–∏–ø—Ç–æ", callback_data="crypto"))
    
    if tools_row:
        buttons.append(tools_row)

    # Entertainment row
    fun_row = []
    if exclude != "joke":
        fun_row.append(InlineKeyboardButton(
            text="üòÑ –®—É—Ç–∫–∞", callback_data="joke"))
    
    if exclude != "cat_fact":
        fun_row.append(InlineKeyboardButton(
            text="üê± –§–∞–∫—Ç –æ –∫–æ—Ç–∞—Ö", callback_data="cat_fact"))
    
    if fun_row:
        buttons.append(fun_row)

    # Settings and feedback
    if exclude != "settings":
        buttons.append([InlineKeyboardButton(
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")])

    # Admin panel for admins
    if is_admin and exclude != "admin_panel":
        buttons.append([InlineKeyboardButton(
            text="üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])

    # Back button
    if exclude:
        buttons.append([InlineKeyboardButton(
            text="üîÑ –ù–∞–∑–∞–¥", callback_data="back")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_weather_keyboard() -> InlineKeyboardMarkup:
    """Get weather selection keyboard."""
    buttons = [
        [
            InlineKeyboardButton(text="üåç –ú–æ—Å–∫–≤–∞", callback_data="weather:Moscow"),
            InlineKeyboardButton(text="üåÜ –ê—à—Ö–∞–±–∞–¥", callback_data="weather:Ashgabat"),
        ],
        [
            InlineKeyboardButton(text="üóΩ –ù—å—é-–ô–æ—Ä–∫", callback_data="weather:New York"),
            InlineKeyboardButton(text="üóº –ü–∞—Ä–∏–∂", callback_data="weather:Paris"),
        ],
        [
            InlineKeyboardButton(text="üèô –õ–æ–Ω–¥–æ–Ω", callback_data="weather:London"),
            InlineKeyboardButton(text="üå∏ –¢–æ–∫–∏–æ", callback_data="weather:Tokyo"),
        ],
        [InlineKeyboardButton(text="üìç –°–≤–æ–π –≥–æ—Ä–æ–¥", callback_data="weather:custom")],
        [InlineKeyboardButton(text="üîÑ –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_news_keyboard() -> InlineKeyboardMarkup:
    """Get news categories keyboard."""
    buttons = [
        [
            InlineKeyboardButton(text="üìà –ë–∏–∑–Ω–µ—Å", callback_data="news:business"),
            InlineKeyboardButton(text="üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", callback_data="news:technology"),
        ],
        [
            InlineKeyboardButton(text="‚öΩ –°–ø–æ—Ä—Ç", callback_data="news:sports"),
            InlineKeyboardButton(text="üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", callback_data="news:entertainment"),
        ],
        [
            InlineKeyboardButton(text="üî¨ –ù–∞—É–∫–∞", callback_data="news:science"),
            InlineKeyboardButton(text="üíä –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="news:health"),
        ],
        [InlineKeyboardButton(text="üì∞ –û–±—â–∏–µ", callback_data="news:general")],
        [InlineKeyboardButton(text="üîÑ –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_admin_keyboard() -> InlineKeyboardMarkup:
    """Get admin panel keyboard."""
    buttons = [
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats"),
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin:users"),
        ],
        [
            InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin:broadcast"),
            InlineKeyboardButton(text="üìã –õ–æ–≥–∏", callback_data="admin:logs"),
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", callback_data="admin:system"),
            InlineKeyboardButton(text="üóÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", callback_data="admin:database"),
        ],
        [InlineKeyboardButton(text="üîÑ –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_settings_keyboard() -> InlineKeyboardMarkup:
    """Get user settings keyboard."""
    buttons = [
        [
            InlineKeyboardButton(text="üåê –Ø–∑—ã–∫", callback_data="settings:language"),
            InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings:notifications"),
        ],
        [
            InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="settings:my_stats"),
            InlineKeyboardButton(text="üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="settings:feedback"),
        ],
        [
            InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="settings:about_bot"),
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="settings:help"),
        ],
        [InlineKeyboardButton(text="üîÑ –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_confirmation_keyboard(action: str) -> InlineKeyboardMarkup:
    """Get confirmation keyboard for dangerous actions."""
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm:{action}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel"),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_pagination_keyboard(
    current_page: int,
    total_pages: int,
    callback_prefix: str
) -> InlineKeyboardMarkup:
    """Get pagination keyboard."""
    buttons = []
    
    # Navigation row
    nav_row = []
    if current_page > 1:
        nav_row.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è", callback_data=f"{callback_prefix}:page:{current_page - 1}"
        ))
    
    nav_row.append(InlineKeyboardButton(
        text=f"{current_page}/{total_pages}", callback_data="noop"
    ))
    
    if current_page < total_pages:
        nav_row.append(InlineKeyboardButton(
            text="‚û°Ô∏è", callback_data=f"{callback_prefix}:page:{current_page + 1}"
        ))
    
    buttons.append(nav_row)
    
    # Back button
    buttons.append([InlineKeyboardButton(text="üîÑ –ù–∞–∑–∞–¥", callback_data="back")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# Legacy function for backward compatibility
def get_inline_keyboard(exclude: Optional[str] = None) -> InlineKeyboardMarkup:
    """Legacy function - use get_main_keyboard instead."""
    return get_main_keyboard(exclude=exclude)
