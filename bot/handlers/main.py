"""Main navigation handlers."""

from aiogram.types import CallbackQuery

from ..keyboards.main_keyboard import get_main_keyboard


async def back_callback_handler(callback: CallbackQuery, user=None, **kwargs) -> None:
    """Handle back button navigation."""
    
    # Check if user is admin for proper keyboard
    is_admin = user and user.is_admin if user else False
    
    welcome_text = (
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:"
    )
    
    await callback.message.edit_text(
        welcome_text,
        reply_markup=get_main_keyboard(is_admin=is_admin),
        parse_mode="HTML"
    )
    await callback.answer()


async def settings_handler(callback: CallbackQuery, user=None, **kwargs) -> None:
    """Handle settings menu."""
    from ..keyboards.main_keyboard import get_settings_keyboard
    
    settings_text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è:"
    )
    
    await callback.message.edit_text(
        settings_text,
        reply_markup=get_settings_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


async def help_handler(callback: CallbackQuery, **kwargs) -> None:
    """Handle help request."""
    help_text = (
        "‚ùì <b>–ü–æ–º–æ—â—å</b>\n\n"
        
        "ü§ñ <b>–û –±–æ—Ç–µ:</b>\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –†–æ–≤—à–µ–Ω–æ–º –ë–∞–π—Ä–∞–º–æ–≤—ã–º –∫–∞–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–∑—é–º–µ "
        "–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞–≤—ã–∫–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.\n\n"
        
        "üöÄ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "üë§ <b>–û–±–æ –º–Ω–µ</b> ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ\n"
        "üíº <b>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ</b> ‚Äî –ø—Ä–æ–µ–∫—Ç—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "üí¨ <b>–¶–∏—Ç–∞—Ç—ã</b> ‚Äî –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Ü–∏—Ç–∞—Ç—ã\n"
        "üå§ <b>–ü–æ–≥–æ–¥–∞</b> ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–æ –≥–æ—Ä–æ–¥–∞–º\n"
        "üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏</b> ‚Äî —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        "‚Çø <b>–ö—Ä–∏–ø—Ç–æ</b> ‚Äî –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "üòÑ <b>–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è</b> ‚Äî —à—É—Ç–∫–∏ –∏ —Ñ–∞–∫—Ç—ã\n"
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞\n\n"
        
        "üí° <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>\n"
        "‚Ä¢ Python 3.11+ & aiogram 3.x\n"
        "‚Ä¢ PostgreSQL + SQLAlchemy\n"
        "‚Ä¢ Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ Docker –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n"
        
        "üìß <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
        "‚Ä¢ Telegram: @ded1fo\n"
        "‚Ä¢ GitHub: github.com/rowsen2904\n"
        "‚Ä¢ LinkedIn: rovshen-bayramov"
    )
    
    await callback.message.edit_text(
        help_text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


async def my_stats_handler(callback: CallbackQuery, user=None, **kwargs) -> None:
    """Handle user statistics request."""
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    from ..core.dependencies import get_analytics_service
    
    try:
        analytics_service = await get_analytics_service()
        user_actions = await analytics_service.get_user_actions(user.id, limit=50)
        user_journey = await analytics_service.get_user_journey(user.id, limit=10)
        
        # Calculate stats
        total_actions = len(user_actions)
        unique_features = len(set(action.action for action in user_actions))
        
        # Most used feature
        feature_counts = {}
        for action in user_actions:
            feature_counts[action.action] = feature_counts.get(action.action, 0) + 1
        
        most_used = max(feature_counts.items(), key=lambda x: x[1]) if feature_counts else ("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", 0)
        
        stats_text = (
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.full_name}\n"
            f"üÜî <b>ID:</b> {user.id}\n"
            f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {user.created_at.strftime('%d.%m.%Y')}\n"
            f"üïê <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {user.last_interaction.strftime('%d.%m.%Y %H:%M')}\n\n"
            
            f"üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {user.total_messages}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {total_actions}\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {unique_features}\n"
            f"‚Ä¢ –õ—é–±–∏–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {most_used[0]} ({most_used[1]} —Ä–∞–∑)\n\n"
        )
        
        if user_journey:
            stats_text += "<b>üóÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
            for action in user_journey[:5]:
                action_time = action['timestamp'].strftime('%d.%m %H:%M')
                stats_text += f"‚Ä¢ {action['action']} ({action_time})\n"
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
    
    await callback.answer()
