"""Admin panel handlers for bot management."""

import logging
from datetime import datetime, timedelta
from typing import Dict

from aiogram import F
from aiogram.types import CallbackQuery, Message

from ..core.dependencies import (
    get_analytics_service,
    get_cache_service,
    get_notification_service,
    get_user_service,
)
from ..keyboards.main_keyboard import (
    get_admin_keyboard,
    get_confirmation_keyboard,
    get_main_keyboard,
    get_pagination_keyboard,
)

logger = logging.getLogger(__name__)


async def admin_panel_handler(callback: CallbackQuery, **kwargs) -> None:
    """Handle admin panel access."""
    user = kwargs.get('user')
    if not user or not user.is_admin:
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


async def admin_stats_handler(callback: CallbackQuery, **kwargs) -> None:
    """Handle admin statistics."""
    try:
        await callback.message.edit_text("üîÑ –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...", parse_mode="HTML")
        
        # Get services
        user_service = await get_user_service()
        analytics_service = await get_analytics_service()
        cache_service = await get_cache_service()
        
        # Get user stats
        user_stats = await user_service.get_user_stats()
        
        # Get analytics stats
        engagement_stats = await analytics_service.get_user_engagement_stats()
        popular_features = await analytics_service.get_popular_features(days=7)
        performance_metrics = await analytics_service.get_performance_metrics(days=7)
        
        # Get cache stats
        cache_stats = await cache_service.get_stats()
        
        # Format message
        message = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            
            "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {user_stats['total_users']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {user_stats['active_users']}\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {user_stats['new_today']}\n"
            f"‚Ä¢ Premium: {user_stats['premium_users']}\n"
            f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {user_stats['blocked_users']}\n\n"
            
            "üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {engagement_stats['total_actions']}\n"
            f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {engagement_stats['unique_users']}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {engagement_stats['average_actions_per_user']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 24—á: {engagement_stats['last_24h_activity']}\n\n"
        )
        
        if popular_features:
            message += "üèÜ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (7 –¥–Ω–µ–π):</b>\n"
            for feature in popular_features[:5]:
                message += f"‚Ä¢ {feature['feature']}: {feature['usage_count']} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"
            message += "\n"
        
        if performance_metrics and performance_metrics['avg_response_time_ms']:
            message += (
                "‚ö° <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {performance_metrics['avg_response_time_ms']:.0f}–º—Å\n"
                f"‚Ä¢ P95 –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {performance_metrics['p95_response_time_ms']:.0f}–º—Å\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {performance_metrics['total_requests']}\n\n"
            )
        
        if cache_stats:
            message += (
                "üóÑ <b>–ö—ç—à:</b>\n"
                f"‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {cache_stats.get('connected_clients', 0)}\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: {cache_stats.get('used_memory', '0B')}\n"
                f"‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É: {cache_stats.get('instantaneous_ops_per_sec', 0)}\n"
            )
        
        await callback.message.edit_text(
            message,
            reply_markup=get_admin_keyboard(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error getting admin stats: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=get_admin_keyboard(),
            parse_mode="HTML"
        )
    
    await callback.answer()


async def admin_users_handler(callback: CallbackQuery, **kwargs) -> None:
    """Handle users management."""
    try:
        user_service = await get_user_service()
        
        # Get recent active users
        users = await user_service.get_active_users(limit=10)
        
        message = "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n"
        
        if users:
            message += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            for user in users:
                status_emoji = "üë§" if not user.is_admin else "üëë"
                last_seen = user.last_interaction.strftime("%d.%m.%Y %H:%M")
                message += (
                    f"{status_emoji} <b>{user.full_name}</b>\n"
                    f"üÜî {user.id} | üìä {user.total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                    f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_seen}\n\n"
                )
        else:
            message += "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        # Add management buttons
        buttons = [
            [callback.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin:search_users")],
            [callback.InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin:export_users")],
            [callback.InlineKeyboardButton(text="üîÑ –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ]
        keyboard = callback.InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            message,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error getting users: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=get_admin_keyboard(),
            parse_mode="HTML"
        )
    
    await callback.answer()


async def admin_broadcast_handler(callback: CallbackQuery, **kwargs) -> None:
    """Handle broadcast message setup."""
    await callback.message.edit_text(
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∞.\n\n"
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


async def admin_broadcast_text_handler(message: Message, **kwargs) -> None:
    """Handle broadcast message text."""
    try:
        user = kwargs.get('user')
        if not user or not user.is_admin:
            await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return
        
        broadcast_text = message.text or message.caption
        if not broadcast_text:
            await message.answer("‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ä–∞—Å—Å—ã–ª–∫—É.")
            return
        
        # Show confirmation
        preview_message = (
            "üì¢ <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
            f"{broadcast_text}\n\n"
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?"
        )
        
        await message.answer(
            preview_message,
            reply_markup=get_confirmation_keyboard(f"broadcast:{message.message_id}"),
            parse_mode="HTML"
        )
        
        # Store broadcast text in cache
        cache_service = await get_cache_service()
        await cache_service.set(f"broadcast:{message.message_id}", broadcast_text, ttl=3600)
        
    except Exception as e:
        logger.error(f"Error handling broadcast text: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.")


async def confirm_broadcast_handler(callback: CallbackQuery, **kwargs) -> None:
    """Handle broadcast confirmation."""
    try:
        # Extract message ID
        action_data = callback.data.split(":")[1]
        if not action_data.startswith("broadcast:"):
            return
        
        message_id = action_data.split(":")[1]
        
        # Get broadcast text from cache
        cache_service = await get_cache_service()
        broadcast_text = await cache_service.get(f"broadcast:{message_id}")
        
        if not broadcast_text:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        # Create broadcast notification
        notification_service = await get_notification_service()
        notification = await notification_service.broadcast_announcement(
            title="–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏",
            message=broadcast_text
        )
        
        # Send the broadcast
        await notification_service.send_notification(notification.id)
        
        await callback.message.edit_text(
            "‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
            reply_markup=get_admin_keyboard(),
            parse_mode="HTML"
        )
        
        # Clean up cache
        await cache_service.delete(f"broadcast:{message_id}")
        
    except Exception as e:
        logger.error(f"Error confirming broadcast: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.",
            reply_markup=get_admin_keyboard(),
            parse_mode="HTML"
        )
    
    await callback.answer()


async def admin_logs_handler(callback: CallbackQuery, **kwargs) -> None:
    """Handle logs viewing."""
    try:
        analytics_service = await get_analytics_service()
        
        # Get recent actions
        recent_actions = await analytics_service.get_daily_stats(days=7)
        
        message = "üìã <b>–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        
        if recent_actions:
            message += "<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:</b>\n"
            for day_stats in recent_actions[-7:]:  # Last 7 days
                date_str = day_stats['date'].strftime("%d.%m")
                message += (
                    f"üìÖ {date_str}: {day_stats['total_actions']} –¥–µ–π—Å—Ç–≤–∏–π, "
                    f"{day_stats['unique_users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                )
        
        # Get popular features
        popular = await analytics_service.get_popular_features(days=7)
        if popular:
            message += "\n<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            for feature in popular[:5]:
                message += f"‚Ä¢ {feature['feature']}: {feature['usage_count']}\n"
        
        await callback.message.edit_text(
            message,
            reply_markup=get_admin_keyboard(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error getting logs: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤.",
            reply_markup=get_admin_keyboard(),
            parse_mode="HTML"
        )
    
    await callback.answer()


async def admin_system_handler(callback: CallbackQuery, **kwargs) -> None:
    """Handle system information."""
    try:
        import psutil
        import sys
        from datetime import datetime
        
        # System info
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        # Bot uptime (simplified)
        uptime = "N/A"  # Would need to track startup time
        
        message = (
            "‚öôÔ∏è <b>–°–∏—Å—Ç–µ–º–∞</b>\n\n"
            
            f"üêç Python: {sys.version.split()[0]}\n"
            f"üíª CPU: {cpu_percent}%\n"
            f"üß† RAM: {memory.percent}% ({memory.used // 1024**3}GB / {memory.total // 1024**3}GB)\n"
            f"üíæ –î–∏—Å–∫: {disk.percent}% ({disk.used // 1024**3}GB / {disk.total // 1024**3}GB)\n"
            f"‚è∞ Uptime: {uptime}\n\n"
            
            "üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
            "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞\n"
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"
        )
        
        buttons = [
            [
                callback.InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", callback_data="admin:clear_cache"),
                callback.InlineKeyboardButton(text="üíæ –ë—ç–∫–∞–ø", callback_data="admin:backup")
            ],
            [callback.InlineKeyboardButton(text="üîÑ –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ]
        keyboard = callback.InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            message,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error getting system info: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ.",
            reply_markup=get_admin_keyboard(),
            parse_mode="HTML"
        )
    
    await callback.answer()


async def admin_clear_cache_handler(callback: CallbackQuery, **kwargs) -> None:
    """Handle cache clearing."""
    try:
        cache_service = await get_cache_service()
        
        # Clear user cache
        user_keys_cleared = await cache_service.clear_pattern("user:*")
        quote_keys_cleared = await cache_service.clear_pattern("last_quote")
        weather_keys_cleared = await cache_service.clear_pattern("weather:*")
        
        total_cleared = user_keys_cleared + quote_keys_cleared + weather_keys_cleared
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ö—ç—à –æ—á–∏—â–µ–Ω</b>\n\n"
            f"–£–¥–∞–ª–µ–Ω–æ –∫–ª—é—á–µ–π: {total_cleared}\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {user_keys_cleared}\n"
            f"‚Ä¢ –¶–∏—Ç–∞—Ç—ã: {quote_keys_cleared}\n"
            f"‚Ä¢ –ü–æ–≥–æ–¥–∞: {weather_keys_cleared}",
            reply_markup=get_admin_keyboard(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error clearing cache: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞.",
            reply_markup=get_admin_keyboard(),
            parse_mode="HTML"
        )
    
    await callback.answer()
